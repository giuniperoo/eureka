App.MapView = Ember.View.extend
  map: null
  marker: null
  tileLayer: null
  mapType: 'natural'
  templateName: 'map'

  updateMap: (->
    Ember.run.scheduleOnce 'afterRender', this, '_updateMap'
  ).observes('controller.model').on 'didInsertElement'

  _updateMap: ->
    mapView = this
    @updateMapType().then ->
      mapView.displayMap()

  updateMapType: ->
    mapView = this
    @.get('controller.store').find('settings').then (settings)->
      mapType = settings.get 'lastObject.mapType'
      mapView.set 'mapType', mapType

  finishLoading: ->
    @.set 'controller.loading', false

  prepareTileLayer: ->
    if @mapType == 'natural'
      @tileLayer = L.mapbox.tileLayer 'examples.ik7djhcc'
    else
      @tileLayer = new L.StamenTileLayer @mapType

    @tileLayer.on 'load', @finishLoading.bind this
    @map.addLayer @tileLayer

  prepareMarker: (latLng)->
    icon = L.icon
      iconRetinaUrl: "<%= image_path('map-marker.png') %>"
      clickable: false
      iconSize: [28.5, 42.5]
      iconAnchor: [14.25, 42.5]
    @marker = new L.Marker latLng,
      icon: icon
      draggable: true
    @map.addLayer @marker

    recordPosition = (evt)->
      latLng = evt.target.getLatLng()
      @setLatLng latLng.lat, latLng.lng
      controller = @.get 'controller'
      controller.saveMapnote()

    @marker.on 'dragend', recordPosition.bind this

  setZoom: (numberOrEvent)->
    controller = @.get 'controller'
    if typeof numberOrEvent == 'object'
      zoom = numberOrEvent.target.getZoom()
      controller.set 'zoom', zoom
      controller.saveMapnote()
    else
      zoom = numberOrEvent
      controller.set 'zoom', zoom

  setLatLng: (latitude, longitude)->
    controller = @.get 'controller'
    controller.set 'latitude', latitude
    controller.set 'longitude', longitude

  offsetMap: ->
    offset = @map.getSize().x * 0.333
    @map.panBy new L.Point(offset, 0),
      animate: false

  showMap: (position) ->
    @map.remove() if @map?

    try
      latitude  = position.coords.latitude
      longitude = position.coords.longitude

      latLng = new L.LatLng latitude, longitude
      @setLatLng latitude, longitude

      zoom = position.zoom || 16
      @setZoom zoom

      options =
        center: latLng
        zoom: zoom
        zoomControl: false
        attributionControl: false

      if @mapType == 'natural'
        L.mapbox.accessToken = 'pk.eyJ1IjoiZ2l1bmlwZXJvbyIsImEiOiJ5QldHbVlvIn0.gBOtqy71Pjhf2gwVsTnP9A'
        @map = L.mapbox.map 'map', null, options
      else
        @map = new L.Map 'map', options

      @map.on 'zoomend', @setZoom.bind this

      @prepareTileLayer()
      @prepareMarker latLng

      @offsetMap()

    catch error
      @showMapError error

  showMapError: (error = '') ->
    @.set 'controller.loading', false
    $('.geolocation').html '<span class="no-location">Unable to determine your location.'

    if typeof error == 'object'
      message = ': ' + error.message
    else
      message = ': ' + error
    console.error 'Unable to determine location' + message

  displayMap: ->
    if @.get 'controller.model.isNew'
      if geoPosition.init()
        geoPosition.getCurrentPosition @showMap.bind(this), @showMapError.bind(this)
      else
        @showMapError()
    else
      position =
        coords:
          latitude:  @.get 'controller.model.latitude'
          longitude: @.get 'controller.model.longitude'
        zoom: @.get 'controller.model.zoom'
      @showMap position
